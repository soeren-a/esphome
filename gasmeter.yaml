globals:
  - id: global_gasmeter_total
    type: float
    restore_value: true

preferences:
  flash_write_interval: 5min

esphome:
  name: gasmeter
  compile_process_limit: 1

  on_boot:
    then:
      - pulse_meter.set_total_pulses:
         id: gasmeter
         value: !lambda 'return id(global_gasmeter_total)*100;'
  
esp8266:
  board: d1_mini
  restore_from_flash: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
    - service: set_pulse_total
      variables:
        new_pulse_total: float
      then:
        - pulse_meter.set_total_pulses:
            id: gasmeter
            value: !lambda 'return new_pulse_total*100;'
        - globals.set:
            id: global_gasmeter_total
            value: !lambda 'return new_pulse_total;'

ota:
  password: "xxx"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Gasmeter Fallback Hotspot"
    password: "xxx"

captive_portal:

sensor:
  - platform: pulse_meter
    pin: 3
    id: gasmeter
    device_class: gas
    unit_of_measurement: 'm³/min'
    name: 'Gas Verbrauch'
    accuracy_decimals: 3
    icon: 'mdi:fire'
    internal_filter: 200ms
    filters:
      - multiply: 0.01
    total:
      name: 'Gas Verbrauch Total'
      id: gasmeter_total
      device_class: gas
      state_class: total
      unit_of_measurement: 'm³'
      accuracy_decimals: 3
      icon: 'mdi:fire'
      filters:
        - multiply: 0.01
      on_value:
        then:
          - globals.set:
              id: global_gasmeter_total
              value: !lambda 'return x;'
          - logger.log: 'got value'


button:
  - platform: restart
    name: 'Gasmeter neu starten'
    icon: 'mdi:restart'
